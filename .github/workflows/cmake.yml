name: build & test

on: [push, pull_request, workflow_dispatch]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. 
      shell: bash
      run: |
        curl -L -O https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip -o build-wrapper-linux-x86.zip
        git submodule update --init --remote --recursive
        build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir cfamily-output cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --verbose -C ${{env.BUILD_TYPE}}

    - name: SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: bash
      run: |
        curl -L -O https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
        unzip sonar-scanner-cli-4.4.0.2170-linux.zip
        sonar-scanner-4.4.0.2170-linux/bin/sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.cfamily.build-wrapper-output=cfamily-output -Dsonar.cfamily.threads=2 -Dsonar.cfamily.cache.enabled=false
      
